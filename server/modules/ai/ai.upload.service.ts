import _AI from "../../utils/ai";

/**
 * Generates a concise summary of a PDF document using an AI model.
 *
 * The summary is returned as a JSON object containing a title and HTML content,
 * with specific CSS classes applied to certain HTML tags as per the provided schema.
 *
 * @param buffer - The PDF file data as a Buffer.
 * @returns An object with `title` and `content` properties containing the summary,
 *          or `false` if summarization fails.
 *
 * @remarks
 * - The summary content is generated by the "gemini-2.5-flash" AI model.
 * - The HTML in the summary applies the following CSS classes:
 *   - `<h1>`: `class="text-4xl"`
 *   - `<ul>`: `class="list-disc pl-8 list-outside"`
 *   - `<ol>`: `class="list-decimal pl-8 list-outside"`
 *   - `<code>`: `class="bg-base-200"`
 *   - `<hr>`: `class="border-t border-base-content/25"`
 * - If an error occurs, the function logs the error and returns `false`.
 */
export async function generateSummaryNotesFromPDF(buffer: Buffer) {
  try {
    const prompt = `
Generate a concise summary of the provided document. The output must be a JSON object containing the summary as an HTML string, conforming to the provided schema.

**Content & HTML Rules:**
1.  The summary must accurately reflect the key information in the document.
2.  Generate semantic HTML for the summary content.
3.  Apply the following CSS classes EXACTLY as specified to their corresponding HTML tags:
    - '<h1>': class="text-4xl"
    - '<ul>': class="list-disc pl-8 list-outside"
    - '<ol>': class="list-decimal pl-8 list-outside"
    - '<code>': class="bg-base-200"
    - '<hr>': class="border-t border-base-content/25"

**JSON Schema:**
{
  "title": "string",
  "content": "string"
}`.trim();

    const contents = [
      {
        text: prompt,
      },
      {
        inlineData: {
          mimeType: "application/pdf",
          data: buffer.toString("base64"),
        },
      },
    ];

    const response = await _AI.models.generateContent({
      model: "gemini-2.5-flash",
      contents,
    });

    const raw = JSON.parse(
      response.text!.replace(/^```json\s*/, "").replace(/```$/, "")
    );

    return {
      title: raw.title,
      content: raw.content,
    };
  } catch (err) {
    console.error("Failed to summarize:", err);
    return false;
  }
}

/**
 * Generates a quiz with at least 10 questions based on the content of a provided PDF document.
 *
 * The quiz is generated by sending the PDF buffer and a prompt to an AI model, which returns
 * a JSON object conforming to a specific schema. Each question includes plausible distractor options,
 * and the correct answers are indicated by their 0-based index in the options array.
 *
 * @param buffer - The PDF file content as a Buffer.
 * @returns An object containing the quiz title and an array of quiz questions if successful,
 *          or `false` if quiz generation fails.
 */
export async function generateQuizFromPDF(buffer: Buffer) {
  try {
    const prompt = `
Generate a quiz with at least 10 questions based on the provided document. The output must conform to the provided JSON schema.

**Content Rules:**
- Questions must be derived solely from the provided document.
- For multiple-choice questions, create plausible but incorrect distractor options.
- The 'correctAnswers' array must contain the 0-based index of the correct option (e.g., '[1]' for the second option).

**JSON Schema:**
{
  "title": "string",
  "quiz_content": [
    {
      "question": "string",
      "description": "string (can be empty)",
      "options": ["string"],
      "correctAnswers": [number]
    }
  ]
}`.trim();

    const contents = [
      {
        text: prompt,
      },
      {
        inlineData: {
          mimeType: "application/pdf",
          data: buffer.toString("base64"),
        },
      },
    ];

    const response = await _AI.models.generateContent({
      model: "gemini-2.5-flash",
      contents,
    });

    const raw = JSON.parse(
      response.text!.replace(/^```json\s*/, "").replace(/```$/, "")
    );

    return {
      title: raw.title,
      quiz_content: raw.quiz_content,
    };
  } catch (err) {
    console.error("Failed to generate quiz:", err);
    return false;
  }
}

/**
 * Generates a set of flashcards from the content of a PDF document.
 *
 * This function sends the PDF buffer to an AI model along with a prompt that instructs
 * the model to extract at least 10 flashcards, each consisting of a key term or concept
 * (front) and its corresponding definition or explanation (back). The output is expected
 * to conform to a specific JSON schema containing a title and an array of flashcards.
 *
 * @param buffer - The PDF file content as a Buffer.
 * @returns An object containing the title and an array of flashcards if successful,
 *          or `false` if the generation fails.
 */
export async function generateFlashcardsFromPDF(buffer: Buffer) {
  try {
    const prompt = `
Generate a set of at least 10 flashcards based on the provided document. The output must conform to the provided JSON schema.

**Content Rules:**
- Flashcards must be derived solely from the provided document.
- The 'front' of each card must be a key term, name, or concept.
- The 'back' of each card must be its corresponding definition or explanation.

**JSON Schema:**
{
  "title": "string",
  "flashcards": [
    {
      "front": "string",
      "back": "string"
    }
  ]
}`.trim();

    const contents = [
      {
        text: prompt,
      },
      {
        inlineData: {
          mimeType: "application/pdf",
          data: buffer.toString("base64"),
        },
      },
    ];

    const response = await _AI.models.generateContent({
      model: "gemini-2.5-flash",
      contents,
    });

    const raw = JSON.parse(
      response.text!.replace(/^```json\s*/, "").replace(/```$/, "")
    );

    return {
      title: raw.title,
      flashcards: raw.flashcards,
    };
  } catch (err) {
    console.error("Failed to generate flashcards:", err);
    return false;
  }
}

/**
 * Generates a concise summary of the provided image buffer using an AI model.
 *
 * The summary is returned as a JSON object containing a title and HTML content,
 * conforming to a specific schema and applying required CSS classes to HTML tags.
 *
 * @param buffer - The image buffer to be summarized (expects JPEG format).
 * @returns An object with `title` and `content` (HTML string) if successful, or `false` on failure.
 */
export async function generateSummaryNotesFromImage(buffer: Buffer) {
  try {
    const prompt = `
Generate a concise summary of the provided image. The output must be a JSON object containing the summary as an HTML string, conforming to the provided schema.

**Content & HTML Rules:**
1.  The summary must accurately describe the key information, text, and concepts present in the image.
2.  Generate semantic HTML for the summary content.
3.  Apply the following CSS classes EXACTLY as specified to their corresponding HTML tags:
    - '<h1>': class="text-4xl"
    - '<ul>': class="list-disc pl-8 list-outside"
    - '<ol>': class="list-decimal pl-8 list-outside"
    - '<code>': class="bg-base-200"
    - '<hr>': class="border-t border-base-content/25"

**JSON Schema:**
{
  "title": "string",
  "content": "string"
}`.trim();

    const contents = [
      {
        text: prompt,
      },
      {
        inlineData: {
          mimeType: "image/jpeg",
          data: buffer.toString("base64"),
        },
      },
    ];

    const response = await _AI.models.generateContent({
      model: "gemini-2.5-flash",
      contents,
    });

    const raw = JSON.parse(
      response.text!.replace(/^```json\s*/, "").replace(/```$/, "")
    );

    return {
      title: raw.title,
      content: raw.content,
    };
  } catch (err) {
    console.error("Failed to generate summary:", err);
    return false;
  }
}
