import db_client from "../../utils/client";

/**
 * Retrieves all notes associated with a specific user.
 *
 * @param user_id - The unique identifier of the user whose notes are to be fetched.
 * @returns A promise that resolves to an array of notes belonging to the user.
 * @throws Will throw an error if the database query fails.
 */
export async function getUserNotes(user_id: string) {
  try {
    return await db_client.note.findMany({
      where: { user_id },
    });
  } catch (err) {
    throw err;
  }
}

/**
 * Retrieves a note belonging to a user by its unique identifier.
 *
 * @param note_id - The unique identifier of the note to retrieve.
 * @returns A promise that resolves to the note object if found, or `null` if not found.
 * @throws Will propagate any errors encountered during the database query.
 */
export async function getUserNote(note_id: string) {
  try {
    return await db_client.note.findFirst({
      where: { id: note_id },
    });
  } catch (err) {
    throw err;
  }
}

/**
 * Creates a new note for a user in the database.
 *
 * @param title - The title of the note.
 * @param content - The content of the note.
 * @param user_id - The ID of the user who owns the note.
 * @param is_ai_generated - Indicates whether the note was generated by AI.
 * @returns A promise that resolves to the created note object.
 * @throws Will throw an error if the note creation fails.
 */
export async function createUserNote(
  title: string,
  content: string,
  user_id: string,
  is_ai_generated: boolean
) {
  try {
    return await db_client.note.create({
      data: {
        title,
        notes_content: content,
        user_id,
        is_ai_generated,
      },
    });
  } catch (err) {
    throw err;
  }
}

/**
 * Updates an existing user note with the provided title and content.
 *
 * @param title - The new title for the note.
 * @param content - The new content for the note.
 * @param note_id - The unique identifier of the note to update.
 * @returns A promise that resolves to the updated note object.
 * @throws Will throw an error if the update operation fails.
 */
export async function updateUserNote(
  title: string,
  content: string,
  note_id: string
) {
  try {
    return await db_client.note.update({
      data: {
        title,
        notes_content: content,
      },
      where: { id: note_id },
    });
  } catch (err) {
    throw err;
  }
}

/**
 * Deletes a user note from the database by its ID.
 *
 * @param note_id - The unique identifier of the note to be deleted.
 * @returns A promise that resolves to `true` if the note was successfully deleted.
 * @throws Will throw an error if the deletion fails.
 */
export async function deleteUserNote(note_id: string) {
  try {
    await db_client.note.delete({
      where: { id: note_id },
    });
    return true;
  } catch (err) {
    throw err;
  }
}

/**
 * Toggles the visibility of a note by updating its `is_public` status.
 *
 * @param visibility - The desired visibility state (`true` for public, `false` for private).
 * @param note_id - The unique identifier of the note to update.
 * @returns A promise that resolves to `true` if the update is successful.
 * @throws Will throw an error if the update operation fails.
 */
export async function toggleNoteVisibility(
  visibility: boolean,
  note_id: string
) {
  try {
    await db_client.note.update({
      data: { is_public: visibility },
      where: { id: note_id },
    });
    return true;
  } catch (err) {
    throw err;
  }
}
